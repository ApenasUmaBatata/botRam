const db = require("quick.db"); // Puxando a nossa DataBase. *Instale utilizando: npm i quick.db --save
const Discord = require("discord.js"); // Puxando a livraria Discord.js

module.exports = {
  config: {
    name: "emprego",
    aliases: ["trabalhos"]
  },
  run: async (bot, message, args, tools) => {
    await message.react("‚úÖ");
    var emprego = await db.get(`trabaio_${message.author.id}`); // Puxando o 'trabaio', que iremos utilizar para definir na DB o trabalho dos usu√°rios
    if (emprego === 1)
      return message.reply(`voc√™ j√° tem um emprego! üê¥ Domador`); 
    if (emprego === 2)
      return message.reply(`voc√™ j√° tem um emprego! üè∫ Artes√£o`); 
    if (emprego === 3)
      return message.reply(`voc√™ j√° tem um emprego! ‚öîÔ∏è Ferreiro`); 
    if (emprego === 4)
      return message.reply(`voc√™ j√° tem um emprego! üèπ Armeiro`);

    let embed = new Discord.MessageEmbed() // Criando uma embed
      .setDescription(
        `Nobre guerreiro para voce ter um emprego, primeiro deve escolher ele!\n\nüê¥ = Domador\nüè∫ = Artes√£o\n‚öîÔ∏è = Ferreiro\nüèπ = Armeiro`
      )
      .setColor("RAMDOM");

    message.channel.send(embed).then(msg => {
      // definindo a fun√ß√£o 'then' como 'msg'

      msg
        .react("üê¥")
        .then(() => msg.react("üè∫"))
        .then(() => msg.react("‚öîÔ∏è"))
        .then(() => msg.react("üèπ")); // reagindo com dois emojis, referentes √† cada emprego

      const filter = (reaction, user) => {
        // Criando um filtro para quem clicou no emoji
        return (
          ["üê¥", "üè∫", "‚öîÔ∏è", "üèπ"].includes(reaction.emoji.name) &&
          user.id === message.author.id
        ); // caso o ID do usu√°rio que clicou, seja igual ao do que puxou, iremos fazer a a√ß√£o
      };
      msg
        .awaitReactions(filter, { max: 1, time: 60000, errors: ["time"] }) // retornnando com as rea√ß√µes
        .then(collected => {
          // mais uma fun√ß√£o 'then', definida como 'collected'
          const reaction = collected.first();

          if (reaction.emoji.name === "üê¥") {
            // Caso o usu√°rio clique no emoji referente √† Programador
            message.reply("Voc√™ adquiriu o emprego *Domador*");
            db.add(`trabaio_${message.author.id}`, 1); // iremos adicionar 1 (um) na DB, que iremos usar como Programador
          }
          if (reaction.emoji.name === "üè∫") {
            // Agora, caso o usu√°rio clique no outro emoji, referente √† Designer
            message.reply("Voc√™ adquiriu o emprego *Artes√£o*");
            db.add(`trabaio_${message.author.id}`, 2); // iremos adicionar 2 (dois) na DB, que iremos definir como Designer
          }
          if (reaction.emoji.name === "‚öîÔ∏è") {
            // Agora, caso o usu√°rio clique no outro emoji, referente √† Designer
            message.reply("Voc√™ adquiriu o emprego *Ferreiro*");
            db.add(`trabaio_${message.author.id}`, 3); // iremos adicionar 2 (dois) na DB, que iremos definir como Designer
          }
          if (reaction.emoji.name === "üèπ") {
            // Agora, caso o usu√°rio clique no outro emoji, referente √† Designer
            message.reply("Voc√™ adquiriu o emprego *Armeiro*");
            db.add(`trabaio_${message.author.id}`, 4); // iremos adicionar 2 (dois) na DB, que iremos definir como Designer
          }
        })
        .catch(collected => {
          // Lembra da 'then' collected? Pois √©! Caso o usu√°rio n√£o clique em 30s, iremos declarar como cancelado
          message.reply("o tempo para escolher excedeu! Tente novamente mais tarde!");
        });
    });
  }
};
